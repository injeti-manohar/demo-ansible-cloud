---
- name: Delete Application Instances, VPC & Associated Components
  hosts: localhost
  tasks:
    - name: Get Instance Facts
      ec2_instance_facts:
        region: "{{ aws_region }}"
        filters:
          "tag:Name": "{{ item }}.{{ app_prefix }}.{{ aws_infra_zone }}"
          instance-state-name: running
      register: ec2_instance_facts_results
      with_items:
        - "{{ groups['web'] }}"

    - name: Debug ec2_instance_facts_results
      debug:
        var: ec2_instance_facts_results
        verbosity: 2

    - name: Set my_instance_facts
      set_fact:
        my_instance_facts: "{{ ec2_instance_facts_results.results | map(attribute='instances') | flatten }}"

    - name: Debug my_instance_facts
      debug:
        var: my_instance_facts
        verbosity: 2

    - name: Get ELB Facts
      ec2_elb_facts:
        names:
          - "{{ app_prefix }}-elb"
        region: "{{ aws_region }}"
      register: ec2_elb_facts_results

    - name: Debug ec2_elb_facts_results
      debug:
        var: ec2_elb_facts_results
        verbosity: 2

    - name: Delete Load Balancer
      ec2_elb_lb:
        name: "{{ app_prefix }}-elb"
        region: "{{ aws_region }}"
        state: absent
        wait: yes

    - name: Delete DNS Entries in Route53
      route53:
        state: absent
        zone: "{{ aws_infra_zone }}"
        record: "{{ item.tags.Name }}."
        type: A
        value: "{{ item.public_ip_address }}"
      with_items:
        - "{{ my_instance_facts }}"

    - name: Delete ELB Alias
      route53:
        state: absent
        zone: "{{ aws_infra_zone }}"
        record: "app.{{ app_prefix }}.{{ aws_infra_zone }}."
        type: A
        value: "{{ ec2_elb_facts_results.elbs[0].hosted_zone_name }}"
        alias: true
        alias_hosted_zone_id: "{{ ec2_elb_facts_results.elbs[0].hosted_zone_id }}"
      when: ec2_elb_facts_results.elbs | count > 0

    - name: Delete Instance(s) in EC2
      ec2_instance:
        region: "{{ aws_region }}"
        instance_ids:
          - "{{ item.instance_id }}"
        state: absent
        wait: yes
      with_items:
        - "{{ my_instance_facts }}"

    - name: Delete RDS Instance
      rds_instance:
        region: "{{ aws_region }}"
        state: absent
        db_instance_identifier: "{{ app_prefix }}-database"
        skip_final_snapshot: yes

    - name: Get VPC Facts
      ec2_vpc_net_facts:
        filters:
          "tag:Name": "{{ app_prefix }}-vpc"
        region: "{{ aws_region }}"
      register: ec2_vpc_net_facts_results

    - name: Debug ec2_vpc_net_facts_results
      debug:
        var: ec2_vpc_net_facts_results
        verbosity: 2

    - name: Get VPC Security Group Facts
      ec2_group_facts:
        filters:
          vpc-id: "{{ ec2_vpc_net_facts_results.vpcs[0].id }}"
        region: "{{ aws_region }}"
      register: ec2_group_facts_results

    - name: Debug ec2_group_facts_results
      debug:
        var: ec2_group_facts_results
        verbosity: 2

    # Can't delete the default security group, so skip
    - name: Delete VPC Security Groups
      ec2_group:
        group_id: "{{ item.group_id }}"
        region: "{{ aws_region }}"
        state: absent
      when: item.group_name != "default"
      with_items:
        - "{{ ec2_group_facts_results.security_groups }}"

    - name: Get VPC Subnet Facts
      ec2_vpc_subnet_facts:
        filters:
          vpc-id: "{{ ec2_vpc_net_facts_results.vpcs[0].id }}"
        region: "{{ aws_region }}"
      register: ec2_vpc_subnet_facts_results

    - name: Debug ec2_vpc_subnet_facts_results
      debug:
        var: ec2_vpc_subnet_facts_results
        verbosity: 2

    - name: Delete RDS Subnet Group
      rds_subnet_group:
        region: "{{ aws_region }}"
        state: absent
        name: "{{ app_prefix }}-database-{{ aws_region }}"

    - name: Delete VPC Subnets
      ec2_vpc_subnet:
        cidr: "{{ item.cidr_block }}"
        region: "{{ aws_region }}"
        state: absent
        vpc_id: "{{ ec2_vpc_net_facts_results.vpcs[0].id }}"
      with_items:
        - "{{ ec2_vpc_subnet_facts_results.subnets }}"

    - name: Delete VPC IGW
      ec2_vpc_igw:
        region: "{{ aws_region }}"
        state: absent
        vpc_id: "{{ ec2_vpc_net_facts_results.vpcs[0].id }}"

    - name: Delete VPC
      ec2_vpc_net:
        cidr_block: "10.250.0.0/16"
        name: "{{ ec2_vpc_net_facts_results.vpcs[0].tags.Name }}"
        region: "{{ aws_region }}"
        state: absent
